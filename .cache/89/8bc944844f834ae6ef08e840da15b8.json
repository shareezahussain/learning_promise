{"id":"../node_modules/ncrypt-js/dist/src/ncrypt.js","dependencies":[{"name":"/Users/shareezahussain/Documents/everything-pink/node_modules/ncrypt-js/dist/src/ncrypt.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/shareezahussain/Documents/everything-pink/node_modules/ncrypt-js/src/ncrypt.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/shareezahussain/Documents/everything-pink/package.json","includedInParent":true,"mtime":1604328700830},{"name":"/Users/shareezahussain/Documents/everything-pink/node_modules/ncrypt-js/package.json","includedInParent":true,"mtime":1604328700392},{"name":"./utils","loc":{"line":3,"column":24},"parent":"/Users/shareezahussain/Documents/everything-pink/node_modules/ncrypt-js/dist/src/ncrypt.js","resolved":"/Users/shareezahussain/Documents/everything-pink/node_modules/ncrypt-js/dist/src/utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nclass Ncrypt {\n    /**\n     * object constructor\n     * @param text\n     * @param secret\n     */\n    constructor(secret) {\n        /**\n         * convert all entered text to decimal equivalent character codes\n         * @param {data.<string>} data to be converted\n         * @return {Array.<number>} array of character codes\n         */\n        this.convertTextToDecimal = (data) => data.split('').map((value) => value.charCodeAt(0));\n        /**\n         * encode provided secret on decimal character codes\n         * @param {charCode<number[], *>} character codes\n         */\n        this.applySecretToCharacters = (charCodes) => this.convertTextToDecimal(this.secret)\n            .reduce((firstValue, secondValue) => (firstValue ^ secondValue), charCodes);\n        /**\n         * convert character bytes to hexadecimal equivalent\n         * @param {number.<number>}\n         * @returns {string} hexadecimal string\n         */\n        this.convertByteToHexadecimal = (number) => {\n            return (\"0\" + Number(number).toString(16)).substr(-2);\n        };\n        /**\n         * process data to be encrypted\n         * @param {}\n         * @returns {string.<string>} encoded string data\n         */\n        this.encrypt = (data) => {\n            /**\n             * this does the actual processing return a string\n             * resulting from charCode conversion, salting and\n             * hexadecimal mapping\n             *\n             */\n            // if (data == void 0) throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n            try {\n                const encodedMessage = JSON.stringify(data).split('')\n                    .map(this.convertTextToDecimal)\n                    .map(this.applySecretToCharacters)\n                    .map(this.convertByteToHexadecimal)\n                    .join('');\n                return utils_1.encode(encodedMessage);\n            }\n            catch (error) {\n                throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n            }\n        };\n        /**\n         * decodes encoded string resulting from util encryption\n         * @param {string.<stirng>} encodeData\n         * @returns {decodedData.<string>} decoded data\n         */\n        this.decrypt = (text) => {\n            const encodeData = utils_1.decode(text);\n            const data = encodeData.match(/.{1,2}/g)\n                .map((hex) => parseInt(hex, 16))\n                .map(this.applySecretToCharacters)\n                .map((charCode) => String.fromCharCode(charCode))\n                .join('');\n            const arr = [];\n            arr.push(data);\n            return JSON.parse(data);\n        };\n        this.secret = secret;\n    }\n}\nexports.default = Ncrypt;\n"},"sourceMaps":{"js":{"version":3,"file":"ncrypt.js","sourceRoot":"","sources":["../../src/ncrypt.ts"],"names":[],"mappings":";;AACA,mCAAyC;AAEzC,MAAqB,MAAM;IAazB;;;;OAIG;IACH,YAAY,MAAc;QAI1B;;;;WAIG;QACH,yBAAoB,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5F;;;WAGG;QACH,4BAAuB,GAAG,CAAC,SAAqC,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC;aACxG,MAAM,CAAC,CAAC,UAAe,EAAE,WAAgB,EAAE,EAAE,CAAC,CAAC,UAAU,GAAG,WAAW,CAAC,EAAE,SAAS,CAAC,CAAA;QAEvF;;;;WAIG;QACH,6BAAwB,GAAG,CAAC,MAAc,EAAE,EAAE;YAC5C,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAA;QAED;;;;WAIG;QACH,YAAO,GAAG,CAAC,IAAwC,EAAE,EAAE;YACrD;;;;;eAKG;YACH,0IAA0I;YAC1I,IAAI;gBACF,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;qBAClD,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC;qBAC9B,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC;qBACjC,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC;qBAClC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAEZ,OAAO,cAAM,CAAC,cAAc,CAAC,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;aACpH;QACH,CAAC,CAAA;QAED;;;;WAIG;QACH,YAAO,GAAG,CAAC,IAAY,EAAE,EAAE;YACzB,MAAM,UAAU,GAAG,cAAM,CAAC,IAAI,CAAC,CAAC;YAE9B,MAAM,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC;iBACrC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;iBACpC,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC;iBACjC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;iBACrD,IAAI,CAAC,EAAE,CAAC,CAAC;YAEV,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAA;QAtEC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;CAsEF;AA1FD,yBA0FC","sourcesContent":["import { INcrypt } from './ncrypt.d';\nimport { encode, decode } from './utils';\n\nexport default class Ncrypt implements INcrypt {\n\n  /**\n   * ncrypt namespace.\n   * @type {string.<*>}\n   */\n  private secret: string;\n\n  /**\n   * ncrypt namespace.\n   * @type {string.<*>}\n   */\n  private text: string;\n  /**\n   * object constructor\n   * @param text \n   * @param secret \n   */\n  constructor(secret: string) {\n    this.secret = secret;\n  }\n\n  /**\n   * convert all entered text to decimal equivalent character codes\n   * @param {data.<string>} data to be converted\n   * @return {Array.<number>} array of character codes\n   */\n  convertTextToDecimal = (data: string) => data.split('').map((value) => value.charCodeAt(0));\n\n  /**\n   * encode provided secret on decimal character codes\n   * @param {charCode<number[], *>} character codes\n   */\n  applySecretToCharacters = (charCodes: number[] | number | string) => this.convertTextToDecimal(this.secret)\n    .reduce((firstValue: any, secondValue: any) => (firstValue ^ secondValue), charCodes)\n\n  /**\n   * convert character bytes to hexadecimal equivalent\n   * @param {number.<number>}\n   * @returns {string} hexadecimal string\n   */\n  convertByteToHexadecimal = (number: number) => {\n    return (\"0\" + Number(number).toString(16)).substr(-2);\n  }\n\n  /**\n   * process data to be encrypted\n   * @param {}\n   * @returns {string.<string>} encoded string data\n   */\n  encrypt = (data: object | string | number | boolean) => {\n    /**\n     * this does the actual processing return a string\n     * resulting from charCode conversion, salting and \n     * hexadecimal mapping\n     * \n     */\n    // if (data == void 0) throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n    try {\n      const encodedMessage = JSON.stringify(data).split('')\n        .map(this.convertTextToDecimal)\n        .map(this.applySecretToCharacters)\n        .map(this.convertByteToHexadecimal)\n        .join('');\n\n      return encode(encodedMessage);\n    } catch (error) {\n      throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n    }\n  }\n\n  /**\n   * decodes encoded string resulting from util encryption\n   * @param {string.<stirng>} encodeData \n   * @returns {decodedData.<string>} decoded data\n   */\n  decrypt = (text: string) => {\n    const encodeData = decode(text);\n\n      const data = encodeData.match(/.{1,2}/g)\n        .map((hex: any) => parseInt(hex, 16))\n        .map(this.applySecretToCharacters)\n        .map((charCode: any) => String.fromCharCode(charCode))\n        .join('');\n\n        const arr = [];\n        arr.push(data);\n\n      return JSON.parse(data);\n  }\n}\n"]}},"error":null,"hash":"deb2852d30a23f0904a58cb928e9227b","cacheData":{"env":{}}}